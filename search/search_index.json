{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#welcome-to-the-wiki","title":"Welcome to the Wiki","text":"<p>This project serves as the base framework for my other datapacks, providing a shared API of common functions and ensuring easy compatibility between them. Built entirely upon vanilla Minecraft, the framework creatively \u2014 and unapologetically \u2014 uses the game\u2019s provided mechanics in ways Mojang probably didn\u2019t intend.</p> <p>If you\u2019re new here, the best way to get started is by reviewing the guides on documentation notation and wiki navigation:</p> <ul> <li>\ud83e\udded Wiki Navigation</li> <li>\ud83d\udcdd Documentation Notation</li> </ul> <p>Bug reports are always welcome! You can submit them through the issue tracker, which is also linked on the framework\u2019s pages on Modrinth or Curseforge.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>A big thank you to the teams behind Animated Java and Blockbench. Without their work, this project and all of my other datapacks could not function!</p> <p>If you\u2019re interested in additional documentation on datapack and command optimization, which were also consulted during the development of this project, you can find the links below:</p> <ul> <li>\ud83d\udcdc Commands</li> <li>\ud83d\udce6 Datapacks</li> </ul>"},{"location":"guides/documentation_notation/","title":"\ud83d\udcdd Documentation Notation","text":"<p>This section defines the data type notations and name prefixes used across the project and its documentation. Following these conventions helps you understand which fields are editable, what values they accept, and how the system handles them internally.</p>"},{"location":"guides/documentation_notation/#data-fields","title":"Data Fields","text":""},{"location":"guides/documentation_notation/#types","title":"Types","text":"<ul> <li> <code>(S) String</code> A sequence of characters (e.g., <code>\"Hello\"</code>) </li> <li> <code>(C) Char</code> A single character (e.g., <code>'H'</code>) </li> <li> <code>(E) Enum</code> A defined set of named values (e.g., <code>'top'</code> and <code>'bottom'</code>) </li> <li> <code>(B) Boolean</code> <code>true</code> or <code>false</code> </li> <li> <code>(I) Integer</code> A whole number (e.g., <code>-1</code> or <code>5</code>) </li> <li> <code>(D) Double</code> A floating-point number (e.g., <code>3.14</code>) </li> <li> <code>[.] List Object</code> An ordered list of elements </li> <li> <code>{.} Dict Object</code> A key-valued dictionary of elements </li> <li> <code>&lt;.&gt; Custom Object</code> A custom-structured object of elements </li> </ul>"},{"location":"guides/documentation_notation/#type-prefixes","title":"Type Prefixes","text":"<p>These prefixes are prepended in front of the data field type (e.g., <code>~(I)</code> or <code>$(I)</code>).</p> <ul> <li> <code>x</code> Regular field </li> <li> <code>~x</code> Field accepts a range or fixed value </li> <li> <code>$x</code> Internal-use only. Do not modify </li> </ul>"},{"location":"guides/documentation_notation/#functions","title":"Functions","text":""},{"location":"guides/documentation_notation/#function-folder-names","title":"Function Folder Names","text":"<ul> <li> <code>.x</code> Regular function folder </li> <li> <code>_x_</code> Special function folder with a specific task (e.g., <code>_init_</code> for data initialization) </li> <li> <code>-x-</code> Export function folder which holds the internal functions of an exported API function (e.g., <code>-get_uuid-</code>) </li> </ul>"},{"location":"guides/documentation_notation/#function-names","title":"Function Names","text":"<ul> <li> <code>x</code> Regular function </li> <li> <code>_x_</code> Special function function with a specific task (e.g., <code>_main_</code> as a central function entry point)  </li> </ul>"},{"location":"modules/api/functions/","title":"\u2699\ufe0f Functions","text":"<p>An API function serves as a wrapper around a submodule function, encapsulating its core functionality into a single function call. It provides a clean and user-friendly interface, allowing framework users to interact with complex internal logic more easily. In addition to simplifying access, each API function offers detailed information on its behavior and proper usage without having to consult this documentation.</p> <p>All API functions follow a strict execution sequence: 1. Input \u2014 Receive input parameters 2. Stack Push \u2014 Initialize new function call context 3. Function Call \u2014 Execute the submodule's main entry function 4. Stack Pop \u2014 Remove old function  call context 5. Output \u2014 Provide access to the return values</p> <p>This sequence is also exemplified in the API function template used throughout the API submodule:</p> \ud83d\udcc4 API Function Template   API functions in this framework always follow a standardized template, which extends the basic function documentation found in every `.mcfunction` file. In addition to the standard `description` field and execution context providers (`as`, `at`, and `macros`), the template also includes specifications for the function\u2019s optional `input` and `output` fields.   <pre><code>Template Format\n\u251c\u2500\u2500(\ud83c\uddf8) Description: A short explanation of the exported function's purpose, effects and contingencies.\n\u251c\u2500\u2500&lt;.&gt; Input / Output: Specification of all input / output fields.\n\u2502   \u251c\u2500\u2500(\ud83c\uddea) source: Data source type. Can be one of '(SC)' for score or '(ST)' for storage.\n\u2502   \u251c\u2500\u2500(\ud83c\uddf8) name: Name of the score or storage location the data is in.\n\u2502   \u2514\u2500\u2500(\ud83c\udde8) -: '&gt;'\n\u2502       \u251c\u2500\u2500(\ud83c\uddea) type: The data type of the field. Can be one of 'Integer', 'Decimal' or 'String'.\n\u2502       \u251c\u2500\u2500(\ud83c\udde8) -: '\u2208'\n\u2502       \u251c\u2500\u2500&lt;.&gt; range: The value range of the field. Can be a set, interval or regex.\n\u2502       \u2514\u2500\u2500&lt;.&gt; info: Type specific information about the field.\n\u2502           \u2514\u2500\u2500&lt;.&gt;: 'Decimal'\n\u2502               \u2514\u2500\u2500(\ud83c\uddea) precision: The fixed amount of decimal points. Can be one of 'Px' with x \u2208 \u2115.\n\u251c\u2500\u2500{.} as: Data of the executing entity\n\u2502   \u251c\u2500\u2500(\ud83c\uddf8) type: The entity type.\n\u2502   \u251c\u2500\u2500{.} nbt: NBT entries and values.\n\u2502   \u2514\u2500\u2500{.} scores: Scoreboard entries with fixed value or range.\n\u251c\u2500\u2500{.} at: Positional execution context.\n\u2502   \u251c\u2500\u2500(\ud83c\uddf8) dim: Dimension.\n\u2502   \u251c\u2500\u2500{.} pos: Coordinate position.\n\u2502   \u2502   \u251c\u2500\u2500(\ud83c\uddee) _x: X-Coordinate.\n\u2502   \u2502   \u251c\u2500\u2500(\ud83c\uddee) _y: Y-Coordinate.\n\u2502   \u2502   \u2514\u2500\u2500(\ud83c\uddee) _z: Z-Coordinate.\n\u2502   \u2514\u2500\u2500{.} rot: Rotational orientation.\n\u2502       \u251c\u2500\u2500(\ud83c\uddee) _pitch: Pitch rotation.\n\u2502       \u2514\u2500\u2500(\ud83c\uddee) _yaw: Yaw rotation.\n\u2514\u2500\u2500[.] macros: List of available macros.\n</code></pre> <pre><code>####################################################################################################\n#\n# Description:\n# ...\n#\n#\n# Input:\n#   ...\n#\n# Output:\n#   ...\n#\n#\n# as: {\n#   type:    \"\"\n#   nbt:     {}\n#   scores:  {}\n# }\n# at: {\n#   dim:  \"\"\n#   pos:  {}\n#   rot:  {}\n# }\n# macros: []\n####################################################################################################\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stack Push ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\ndata modify storage uf_api:run return set value {}\ndata modify storage uf_api:run stack append value {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Call ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n...\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stack Pop ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n...\ndata remove storage uf_api:run stack[-1]\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n</code></pre> <p>Now, before each step of the execution sequence can be introduced, it is necessary to establish the central memory system. It provides the necessary execution context for the internal submodule functions to operate correctly and will be frequently referenced in the sections that follow.</p> <pre><code>uf_api:run\n\u251c\u2500\u2500[.] stack: Per-function memory space used for temporary data storage.\n\u251c\u2500\u2500{.} heap: Global memory space used for permanent data storage.\n\u2502   \u251c\u2500\u2500{.} args: Arguments field used to pass string arguments to functions.\n\u2502   \u2514\u2500\u2500{.} ioc: Internal Operations &amp; Commands (IOC) field for function macros.\n\u2514\u2500\u2500{.} return: Global memory space used for function return values.\n</code></pre>"},{"location":"modules/api/functions/#input-output","title":"Input &amp; Output","text":"<p>For proper functionality, this framework must support two basic data types: <code>Strings</code> and <code>Integers</code>. All other data types can be interpreted as <code>Strings</code> (e.g., <code>Enum</code>, <code>Char</code>) or <code>Integers</code> (e.g., <code>Boolean</code>, <code>Double</code>) by employing mapping structures (e.g.,<code>Boolean</code> as <code>true = 1</code> and <code>false = 0</code>) or documented conventions (e.g., <code>Double</code> represented as an <code>Integer</code> with a fixed decimal point).</p> <p>In this framework, <code>Integers</code> are always provided using the scoreboard. Each API function is assigned a single scoreboard objective and can receive or return values by varying the scoreboard player name, using the following format:</p> Category Scoreboard Player Format Purpose Input $UF.INP. Receive caller input parameters Temporary $UF.TMP. Internal calculations Output $UF.OUT. Provide access to return values <p>In contrast, <code>Strings</code> are supplied through the memory system via the heap (see above), since the stack entry for the called function is not yet initialized during input setup at runtime. Output <code>Strings</code> are returned through the dedicated <code>return</code> field of the memory system, which persists after the function call completes.</p> <p>\ud83d\udca1 Note: This approach provides the simplest way to bypass the stack restriction without having to temporarily store the data elsewhere and copy it over once the stack entry becomes available. Although these values are stored on the heap, they are always cleaned up after the function call completes, maintaining the same lifecycle as stack-based data.</p>"},{"location":"modules/api/functions/#stack-push","title":"Stack Push","text":"<p>To manage temporary memory allocation for each API function call and prevent data overwriting from outer calls, the framework employs a stack-based memory model.</p> <p>When an API function is invoked, the framework appends a new, empty NBT object to the stack \u2014 a list that represents the call stack. This action creates a new, isolated stack frame that the current function can exclusively access via <code>stack[-1]</code>.</p> <p>This approach ensures two critical properties:</p> <ol> <li>Data Isolation: Each function call operates on its own stack frame, preventing interference with data belonging to other active calls.</li> <li>Consistent Access: By always referencing the current frame through the fixed index <code>-1</code>, the function maintains a stable and uniform interface to its temporary memory.</li> </ol> <p>Additionally, to ensure consistent handling of return values, the memory system\u2019s <code>return</code> field is reset to an empty NBT object during this step.</p> <p>\ud83d\udca1 Note: To optimize performance, the API function may omit parts of this initialization step if no temporary memory allocation or return value assignment is required. Consequently, certain operations in the corresponding Stack Pop phase may also be skipped.</p>"},{"location":"modules/api/functions/#function-call","title":"Function Call","text":"<p>This function call yields execution to the main entry point of the submodule\u2019s functions.</p>"},{"location":"modules/api/functions/#stack-pop","title":"Stack Pop","text":"<p>Once function execution has completed, the input and temporary scores must be reset, and the current stack entry must be popped from the stack.</p> <p>\ud83d\udca1 Note: If the Stack Push step was partially omitted (e.g., because no temporary memory was needed), the corresponding parts of this step may also be skipped.</p>"},{"location":"modules/core/","title":"TODO","text":"<p>The core module serves as the foundation for the initialization of all other modules, particularly the API (e.g., create the <code>uf_api:run</code> storage as the memory system). It also features uninstallation methods and framework versioning, which other datapacks use to verify the presence of a compatible framework version.</p>"},{"location":"modules/entity/","title":"TODO","text":""},{"location":"modules/entity/#predicates","title":"Predicates","text":"Name Check is_flying Is the entity's flying flag set. is_invincible Does the entity have invincibility ticks active. is_invulnerable Is the entity's invulnerable flag set. is_on_fire Is the entity's on_fire flag set. is_on_ground Is the entity's on_ground flag set. is_sneaking Is the entity's sneaking flag set. is_sprinting Is the entity's sprinting flag set. is_swimming Is the entity's swimming flag set."},{"location":"modules/math/data_dimension/","title":"\ud83c\udf00 Data Dimension","text":"<p>This dimension is utilized by other submodules to temporarily store data that cannot be efficiently maintained in custom storages. By default, the framework force-loads the chunk at coordinates <code>(0, 0)</code> to ensure it is always available and places a stone layer at <code>y = 0</code> to prevent summoned entities from falling into the void.</p> Position Purpose 000    001    000 Temporary barrel placement. 001    001    000 Armor stand summoning."},{"location":"modules/player/custom_armor/","title":"\ud83d\udee1\ufe0f Custom Armor","text":""},{"location":"modules/player/custom_armor/#simple","title":"Simple","text":"<p>Simple ass fucking armor to prevent fuckups</p>"},{"location":"modules/player/custom_armor/#implementation-concept","title":"Implementation Concept","text":""},{"location":"modules/player/custom_armor/#custom-data-format","title":"Custom Data Format","text":"<p>The following data is set at the path <code>UF.custom_armor</code> in the <code>minecraft:custom_data</code> data component.</p> <ul> <li> <code>(S) id</code> A unique resource identifier in the format <code>&lt;namespace&gt;:&lt;name&gt;</code>. </li> <li> <code>(E) type</code> The type of armor. Can be one of 'simple' or 'ability'. </li> <li> <code>{.} data</code> A user-controlled field for storing armor-specific ability data. </li> </ul>"},{"location":"modules/player/custom_armor/#ability","title":"Ability","text":"<p>This armor type enables a passive ability via a user-defined enchantment.</p> Warn <p>Custom armor pieces are based on the chainmail armor set. Other armor types do not support custom abilities. Use data components and custom item models to overwrite vanilla Minecraft behavior and textures. Click here for more information on data components.</p> Technical Concept <p>Equipping custom armor pieces is tracked using a <code>minecraft:inventory_changed</code> advancement trigger on a per-piece basis. When a custom armor piece is equipped, the specified enchantment is applied, activating the associated ability.</p> <p>Unequipping custom armor pieces is tracked using a single global <code>minecraft:inventory_changed</code> advancement trigger. When a custom armor piece is unequipped, the associated function locates the new slot the armor piece has moved to and removes the specified enchantment, deactivating the corresponding ability.</p> Info <p>This can result in the ability being briefly deactivated and immediately reactivated if the player quickly moves the item from and back into an armor slot. This behavior is a limitation of the current detection system and cannot be fully avoided.</p> <p>Dropping a custom armor piece directly from an armor slot is tracked using a <code>minecraft:inventory_changed</code> advancement trigger, along with scoreboard entries using the <code>minecraft.dropped</code> criteria for each chainmail armor piece (<code>minecraft:chainmail_helmet</code>, <code>minecraft:chainmail_chestplate</code>, <code>minecraft:chainmail_leggings</code>, and <code>minecraft:chainmail_boots</code>). When a custom armor piece is dropped, the associated function locates the new item stack of the custom armor piece and removes the specified enchantment, thereby deactivating the corresponding ability.</p> <p>By dynamically adding and removing the custom enchantment from custom armor pieces, performance is improved, as there's no need to constantly check whether the enchantment is active in a specific inventory slot. This also reduces visual clutter on the item and allows it to be freely enchanted using the enchanting table. As a result, this method is minimally invasive to vanilla player behavior.</p>"},{"location":"modules/player/custom_armor/#custom-data-format_1","title":"Custom Data Format","text":"<p>The following data is set at the path <code>UF.custom_armor</code> in the <code>minecraft:custom_data</code> data component.</p> <ul> <li> <code>(S) id</code> A unique resource identifier in the format <code>&lt;namespace&gt;:&lt;name&gt;</code>. </li> <li> <code>(E) type</code> The type of armor. Can be one of 'simple' or 'ability'. </li> <li> <code>{.} data</code> A user-controlled field for storing armor-specific ability data. </li> <li><code>{.} ability</code><ul> <li> <code>(B) $active</code> An internal activation flag. </li> <li> <code>(S) enchantment</code> The resource location of a user-defined armor enchantment. </li> </ul> </li> </ul>"},{"location":"modules/player/custom_armor/#examples","title":"Examples","text":"Ability <p>This loot table provides the player with a <code>minecraft:chainmail_helmet</code> that has a passive ability enchantment. The used ability enchantment is found at the resource location <code>example:passive</code>.</p> <p>Click here for more information on enchantment definition.</p> <p>To maintain compatibility with future updates of this framework, the general item modifier is applied first. The specific data for the axe is then overwritten, ensuring seamless integration with potential future changes.</p> <pre><code>{\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"minecraft:chainmail_helmet\",\n          \"weight\": 1,\n          \"functions\": [\n            {\n              \"function\": \"minecraft:reference\",\n              \"name\": \"uf_api:player/custom_armor/ability\"\n            },\n            {\n              \"function\": \"minecraft:set_custom_data\",\n              \"tag\": {\n                \"UF\": {\n                  \"custom_armor\": {\n                    \"id\": \"example:my_super_special_helmet\",\n                    \"ability\": {\n                      \"enchantment\": \"example:passive\"\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/player/custom_item/","title":"\ud83d\udde1\ufe0f Custom Item","text":"<p>Enables items to have primary and secondary abilities, each of which invokes a custom function upon activation. Items can be configured to be consumed or preserved when an ability is used. A single, shared cooldown can be configured for both abilities, and items can be assigned to a cooldown group for coordinated cooldown behavior.</p>"},{"location":"modules/player/custom_item/#technical-concept","title":"Technical Concept","text":"<p>Uses the <code>minecraft:consumable</code> data component in combination with <code>minecraft:consume_item</code> advancement triggers to execute a custom function when the item is right-clicked (primary ability) or shift + right-clicked (secondary ability). A shared cooldown is applied to the associated custom item group upon use via the <code>minecraft:use_cooldown</code> data component.</p>"},{"location":"modules/player/custom_item/#custom-data-format","title":"Custom Data Format","text":"<p>The following data is set in the <code>minecraft:custom_data</code> data component under the global namespace <code>UF</code> of the framework.</p> <pre><code>custom_item\n\u251c\u2500\u2500(\ud83c\uddf8) id: Unique resource identifier. Must be of '&lt;namespace&gt;:&lt;name&gt;'.\n\u251c\u2500\u2500(\ud83c\uddea) type: The type of the item. Can be one of 'simple' or 'ability'.\n\u251c\u2500\u2500{.} data: Custom data field for item specific data storage.\n\u2514\u2500\u2500{.} ability: Specification of the primary and / or secondary ability.\n    \u251c\u2500\u2500{.} primary: Specifies the RIGHT-CLICK ability of the item. Can be one of 'empty' or an NBT object.\n    \u2502   \u251c\u2500\u2500(\ud83c\udde7) consume_item: Whether the item should be consumed on ability activation.\n    \u2502   \u2514\u2500\u2500(\ud83c\uddf8) function: The function to execute on ability activation.\n    \u2514\u2500\u2500{.} secondary: Specifies the SHIFT+RIGHT-CLICK ability of the item. Can be one of 'empty' or an NBT object.\n        \u251c\u2500\u2500(\ud83c\udde7) consume_item: Whether the item should be consumed on ability activation.\n        \u2514\u2500\u2500(\ud83c\uddf8) function: The function to execute on ability activation.\n</code></pre>"},{"location":"modules/player/custom_item/#data-components-format","title":"Data Components Format","text":"<pre><code>use_cooldown\n\u251c\u2500\u2500(\ud83c\uddee) seconds: The item's cooldown in seconds.\n\u2514\u2500\u2500(\ud83c\uddf8) cooldown_group: The item's cooldown group. Can be one of 'default' or '&lt;namespace&gt;:&lt;name&gt;'.\n</code></pre>"},{"location":"modules/player/custom_item/#examples","title":"Examples","text":"Dual Ability   This loot table provides the player with a `minecraft:diamond_axe` that has a primary and a secondary ability:  1. **Right-click**: Executes the function at the resource location `example:primary`. 2. **Shift + Right-click**: Executes the function at the resource location `example:secondary`.  Click [here](https://minecraft.wiki/w/Function_(Java_Edition)) for more information on functions.  To maintain compatibility with future updates of this framework, the general item modifier is applied first. The specific data for the axe is then overwritten, ensuring seamless integration with potential future changes.   <pre><code>{\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"minecraft:diamond_axe\",\n          \"weight\": 1,\n          \"functions\": [\n            {\n              \"function\": \"minecraft:reference\",\n              \"name\": \"uf_api:player/custom_item/ability\"\n            },\n            {\n              \"function\": \"minecraft:set_custom_data\",\n              \"tag\": {\n                \"UF\": {\n                  \"custom_item\": {\n                    \"id\": \"example:my_super_special_axe\",\n                    \"ability\": {\n                      \"primary\": {\n                        \"consume_item\": false,\n                        \"function\": \"example:primary\"\n                      },\n                      \"secondary\": {\n                        \"consume_item\": false,\n                        \"function\": \"example:secondary\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> Single Ability   This loot table provides the player with a `minecraft:diamond_axe` that has only a primary ability:  1. **Right-click**: Executes the function at the resource location `example:primary`. 2. **Shift + Right-click**: Also executes the function at the resource location `example:primary`.  Click [here](https://minecraft.wiki/w/Function_(Java_Edition)) for more information on functions.  To maintain compatibility with future updates of this framework, the general item modifier is applied first. The specific data for the axe is then overwritten, ensuring seamless integration with potential future changes.   <pre><code>{\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"minecraft:diamond_axe\",\n          \"weight\": 1,\n          \"functions\": [\n            {\n              \"function\": \"minecraft:reference\",\n              \"name\": \"uf_api:player/custom_item/ability\"\n            },\n            {\n              \"function\": \"minecraft:set_custom_data\",\n              \"tag\": {\n                \"UF\": {\n                  \"custom_item\": {\n                    \"id\": \"example:my_super_special_axe\",\n                    \"ability\": {\n                      \"primary\": {\n                        \"consume_item\": false,\n                        \"function\": \"example:primary\"\n                      },\n                      \"secondary\": \"empty\"\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> Single Ability with Cooldown   This loot table provides the player with a `minecraft:diamond_axe` that has only a primary ability and a cooldown of `3s` in the cooldown group `example:axes`:  1. **Right-click**: Executes the function at the resource location `example:primary`. 2. **Shift + Right-click**: Also executes the function at the resource location `example:primary`.  Click [here](https://minecraft.wiki/w/Function_(Java_Edition)) for more information on functions. Click [here](https://minecraft.wiki/w/Data_component_format) for more information on data components.  To maintain compatibility with future updates of this framework, the general item modifier is applied first. The specific data for the axe is then overwritten, ensuring seamless integration with potential future changes.   <pre><code>{\n  \"pools\": [\n    {\n      \"rolls\": 1,\n      \"entries\": [\n        {\n          \"type\": \"minecraft:item\",\n          \"name\": \"minecraft:diamond_axe\",\n          \"weight\": 1,\n          \"functions\": [\n            {\n              \"function\": \"minecraft:reference\",\n              \"name\": \"uf_api:player/custom_item/ability\"\n            },\n            {\n              \"function\": \"minecraft:set_custom_data\",\n              \"tag\": {\n                \"UF\": {\n                  \"custom_item\": {\n                    \"id\": \"example:my_super_special_axe\",\n                    \"ability\": {\n                      \"primary\": {\n                        \"consume_item\": false,\n                        \"function\": \"example:primary\"\n                      },\n                      \"secondary\": \"empty\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"function\": \"minecraft:set_components\",\n              \"components\": {\n                \"minecraft:use_cooldown\": {\n                  \"seconds\": 3,\n                  \"cooldown_group\": \"example:axes\"\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/player/player_data/","title":"\ud83d\udc64 Player Data","text":"<p>This module manages player-specific data, provides easy and efficient access to it, and automatically ensures synchronization across player rejoining, thereby avoiding recalculation each time the data is needed. To achieve this, the two advancements <code>join</code> and <code>rejoin</code>, invoked via <code>minecraft:tick</code> advancement triggers, regulate the conditions under which player data may be initialized or resynchronized.</p>"},{"location":"modules/player/player_data/#join","title":"Join","text":"<p>The <code>join</code> advancement ensures that each newly joined player's data, if not previously initialized, is properly initialized.</p> <p>As part of its core functionality, the module initializes several scores for each newly joined player. It assigns a unique <code>player identifier (PID)</code> and sets the player\u2019s <code>reset index</code> to align with the global one.</p> <p>Accessible via distributed PIDs, players also receive a custom storage, which contains the following data:</p> Path Data Name The player's custom name. UUID The player's hyphenated hexadecimal UUID."},{"location":"modules/player/player_data/#rejoin","title":"Rejoin","text":"<p>The <code>rejoin</code> advancement ensures that each newly joined player's data, if previously initialized, is properly resynchronized.</p> <p>\ud83d\udca1 Note: If a player rejoins and is out of sync with the reset cycles (as indicated by the corresponding reset index scoreboard entry), the player is forcefully reinitialized and subsequently resynchronized.</p>"}]}